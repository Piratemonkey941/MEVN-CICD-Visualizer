// Import necessary libraries ================================================
require("dotenv").config();
var createError = require("http-errors");
var express = require("express");
const mongoose = require("mongoose");
var path = require("path");
var cookieParser = require("cookie-parser");
var logger = require("morgan");
const cors = require("cors");
const { auth } = require("express-oauth2-jwt-bearer");
const { expressjwt: jwt } = require("express-jwt");
const secretKey = process.env.AUTH0_PUBLIC_KEY || "Public Key";

const app = express();

// Middleware setup =========================================================
app.use(logger("dev"));
app.use(cookieParser());
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(express.static(path.join(__dirname, "public")));
// app.use(cors());
// Potentially more secure
app.use(
  cors({
    origin: `${process.env.CLIENT_ORIGIN_URL}`,
  })
);

// view engine setup
app.set("views", path.join(__dirname, "views"));
app.set("view engine", "jade");

app.use(
  auth({
    issuerBaseURL: `https://${process.env.AUTH0_DOMAIN}`,
    audience: process.env.AUTH0_AUDIENCE,
  })
);

// configure express-jwt middleware
const jwtMiddleware = jwt({
  secret: secretKey,
  algorithms: ["RS256"], // specify the algorithm to validate the JWT signature
  audience: process.env.AUTH0_AUDIENCE, // 'bb-pipeline'
  credentialsRequired: false, // set to false to allow optional authentication
});

// Add express-jwt as middleware. It will automatically veryfy incoming bearer tokens in authorization headers
app.use(jwtMiddleware);

//Error handling middleware for UnauthorizedError generated by express-jwt
app.use((err, req, res, next) => {
  if (err.name === "UnauthorizedError") {
    return res.status(401).send({ message: err.message });
  }
  next();
});

// Import routes =============================================================
const indexRouter = require("./routes/index");
const usersRouter = require("./routes/users-routing");
const bitbucketRouter = require("./routes/bitbucket-routing");
const pipelinesRouter = require("./routes/pipelines-routing");
const { fetchDataAndStorePipelines } = require("./services/db");

// MongoDB connection =====================================================
// MongoDB connection string
const uri = "mongodb://127.0.0.1:27017/pipelines";

mongoose.connect(uri, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
  serverSelectionTimeoutMS: 5000,
  connectTimeoutMS: 5000,
});

// Use imported routes ====================================================
app.use("/", indexRouter);
app.use("/users", usersRouter);
app.use("/bitbucket", bitbucketRouter);
app.use("/pipelines", pipelinesRouter);

// Catch 404 and forward to error handler ==================================
app.use(function (req, res, next) {
  next(createError(404));
});

// Error handling middleware
app.use(function (err, req, res, next) {
  console.error(err); // Log the error object
  res.status(err.status || 500).send({ message: err.message });
});

// Error handler ===========================================================
app.use(function (err, req, res, next) {
  console.error(err); // Log the error object
  // Set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get("env") === "development" ? err : {};

  // render the error page
  res.status(err.status || 500);
  res.render("error");
});

// Start the server =======================================================
// Happens in bin/www

// Run fetchBitbucketPipelines every 22 seconds
setInterval(fetchDataAndStorePipelines, 22000);

module.exports = app;
